generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String           @id @default(cuid())
  name             String?
  email            String           @unique
  emailVerified    DateTime?
  image            String?
  coverImage       String?
  points           Int              @default(0)
  isOnline         Boolean          @default(false)
  lastSeen         DateTime         @default(now())
  skills           String[]         @default([])
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  accounts         Account[]
  Comment          Comment[]
  following        Follow[]         @relation("UserFollowing")
  followers        Follow[]         @relation("UserFollowers")
  receivedMessages Message[]        @relation("ReceivedMessages")
  sentMessages     Message[]        @relation("SentMessages")
  posts            Post[]
  sessions         Session[]
  chatRooms        ChatRoom[]       @relation("ChatRoomToUser")
  Course           Course[]
  CourseProgress   CourseProgress[]
}

model Post {
  id        String    @id @default(cuid())
  type      String?   @default("post")
  content   Json[]
  image     String?
  authorId  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  comments  Comment[]
  likes     String[]  @default([])
  author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

model Comment {
  id        String    @id @default(cuid())
  content   String
  userId    String
  postId    String
  parentId  String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  User      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  parent    Comment?  @relation("CommentToReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies   Comment[] @relation("CommentToReplies")

  @@index([postId])
  @@index([parentId])
}

model Follow {
  id          String @id @default(cuid())
  followerId  String
  followingId String
  follower    User   @relation("UserFollowing", fields: [followerId], references: [id], onDelete: Cascade)
  following   User   @relation("UserFollowers", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
}

model ChatRoom {
  id           String    @id @default(cuid())
  name         String?
  isGroup      Boolean   @default(false)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  messages     Message[]
  participants User[]    @relation("ChatRoomToUser")
}

model Message {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sender   User   @relation("SentMessages", fields: [senderId], references: [id])
  senderId String

  receiver   User      @relation("ReceivedMessages", fields: [receiverId], references: [id])
  receiverId String
  ChatRoom   ChatRoom? @relation(fields: [chatRoomId], references: [id])
  chatRoomId String?

  @@index([senderId])
  @@index([receiverId])
}

model Course {
  id             String           @id @default(cuid())
  title          String
  description    String           @default("")
  image          String?
  duration       Int
  level          String
  category       String
  tags           String[]
  isPublic       Boolean          @default(false)
  isFeatured     Boolean          @default(false)
  isFree         Boolean          @default(false)
  isCompleted    Boolean          @default(false)
  isInProgress   Boolean          @default(false)
  isFavorite     Boolean          @default(false)
  isLiked        Boolean          @default(false)
  isDisliked     Boolean          @default(false)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  User           User             @relation(fields: [userId], references: [id])
  userId         String
  CourseProgress CourseProgress[]
  courseContent  courseContent[]
}

model CourseProgress {
  id        String   @id @default(cuid())
  courseId  String
  userId    String
  progress  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Course    Course   @relation(fields: [courseId], references: [id])
  User      User     @relation(fields: [userId], references: [id])
}

model courseContent {
  id        String   @id @default(cuid())
  courseId  String
  content   Json[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Course    Course   @relation(fields: [courseId], references: [id])
}
